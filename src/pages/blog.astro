---
import Layout from '../layouts/Layout.astro';

interface Post {
  title: string;
  date: string;
  description: string;
  readingTime: string;
  content: string;
}

const posts: Post[] = [
  {
    title: "Designing with Minimalism in Mind",
    date: "August 5, 2025",
    description: "A deep dive into why less is often more in product design, and how to achieve true visual harmony.",
    readingTime: "5 min read",
    content: "Minimalism in design isn't just about removing elements—it's about intentional curation. Every line, color, and space serves a purpose. When we strip away the unnecessary, we create room for what truly matters to breathe and communicate effectively. The challenge lies not in what to remove, but in knowing what essential elements to preserve.",
  },
  {
    title: "The Subtle Art of Writing Clean Code",
    date: "July 22, 2025",
    description: "Best practices and small habits that lead to cleaner, more maintainable software over time.",
    readingTime: "8 min read",
    content: "Clean code is not about perfection—it's about clarity. Small, consistent practices like meaningful variable names, short functions, and clear comments compound over time. The goal isn't to impress other developers with clever solutions, but to write code that your future self will thank you for.",
  },
  {
    title: "Why Performance is a Feature",
    date: "July 10, 2025",
    description: "Exploring how speed and responsiveness influence user experience far more than we think.",
    readingTime: "6 min read",
    content: "Users don't just notice fast applications—they feel them. Every millisecond of delay creates friction in the user's mental model. Performance isn't a technical concern relegated to the backend; it's a user experience feature that affects engagement, conversion, and user satisfaction in measurable ways.",
  },
];
---

<Layout title="Blog">
  <section class="max-w-3xl mx-auto px-4 py-12">
    <div class="space-y-12">
      {posts.map((post, index) => (
        <article class="group transition-colors duration-200 border-b border-gray-200 pb-4 hover:border-gray-400">
          <header>
            <time class="text-sm text-gray-500">{post.date} • {post.readingTime}</time>
            <h2 class="mt-2 text-2xl font-medium text-gray-900 group-hover:text-black">
              {post.title}
            </h2>
          </header>
          <p class="text-gray-600">{post.description}</p>
          
          <!-- Expandable content div -->
          <div id={`content-${index}`} class="hidden mt-4 p-4 bg-gray-50 rounded-lg border-l-4 border-blue-500">
            <p class="text-gray-700 leading-relaxed">{post.content}</p>
          </div>
          
          <button 
            onclick={`toggleContent(${index})`}
            id={`btn-${index}`}
            class="inline-block mt-4 text-sm font-medium text-gray-800 group-hover:underline cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded"
          >
            Read more →
          </button>
        </article>
      ))}
    </div>
  </section>
</Layout>

<script>
  function toggleContent(index: number): void {
    const contentDiv = document.getElementById(`content-${index}`);
    const button = document.getElementById(`btn-${index}`);
    
    if (contentDiv && contentDiv.classList.contains('hidden')) {
      contentDiv.classList.remove('hidden');
      contentDiv.classList.add('animate-fade-in');
      if (button) button.textContent = 'Read less ←';
    } else if (contentDiv) {
      contentDiv.classList.add('hidden');
      contentDiv.classList.remove('animate-fade-in');
      if (button) button.textContent = 'Read more →';
    }
  }

  // Make the function globally available
  (window as any).toggleContent = toggleContent;
</script>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in {
    animation: fade-in 0.3s ease-out;
  }
</style>